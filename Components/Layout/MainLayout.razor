@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits LayoutComponentBase
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavigationManager

<HeadContent>
    <link href="home.css" rel="stylesheet" />
    @if (isDarkMode)
    {
        <link href="DarkMode.css" rel="stylesheet" />
    }
</HeadContent>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            
            @if (username == null)
            {
                <a href="/Login" target="_blank">Login</a>
                <a href="/Account/Register" target="_blank">Register</a>
            }
            else
            {
                <div>
                    <a @onclick="Logout">Hello, @username! Logout</a>
                </div>
            }
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" checked="@isDarkMode" @onchange="@OnCheckboxChange">
                <label class="form-check-label" for="flexSwitchCheckDefault">Dark Mode</label>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private string? username = null;
    private bool isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("MainLayout OnInitializedAsync");
        var result = await ProtectedSessionStorage.GetAsync<string>("User");
        if (result.Success)
        {
            username = result.Value;
        }
        Console.WriteLine("MainLayout OnInitializedAsync username: " + username);
    }

    private async Task Logout()
    {
        await ProtectedSessionStorage.DeleteAsync("User");
        username = null;
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void OnCheckboxChange(ChangeEventArgs e)
    {
        isDarkMode = (bool)e.Value;
        StateHasChanged();
    }
}
